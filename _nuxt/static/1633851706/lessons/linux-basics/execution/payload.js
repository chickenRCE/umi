__NUXT_JSONP__("/lessons/linux-basics/execution", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L){return {data:[{content:{slug:"execution",layout:"lesson",module:l,title:"Execution",desc:"Basic understanding of how programs are executed",order:5,toc:[{id:s,depth:t,text:u},{id:o,depth:t,text:i}],body:{type:"root",children:[{type:b,tag:d,props:{},children:[{type:a,value:"So far, we've been referring to everything we type into the shell as a command.\nBut in fact, most commands actually "},{type:b,tag:f,props:{},children:[{type:a,value:"execute"}]},{type:a,value:" a "},{type:b,tag:f,props:{},children:[{type:a,value:"program\u002Fexecutable"}]},{type:a,value:".\nPrograms are just files that represent certain operations that should be done by the computer when the file is "},{type:b,tag:k,props:{},children:[{type:a,value:"executed\u002Frun"}]},{type:a,value:p}]},{type:a,value:c},{type:b,tag:v,props:{id:s},children:[{type:b,tag:m,props:{href:"#shell-scripts",ariaHidden:w,tabIndex:x},children:[{type:b,tag:q,props:{className:[y,z]},children:[]}]},{type:a,value:u}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"An easy example of an executable file is a "},{type:b,tag:f,props:{},children:[{type:a,value:"shell script"}]},{type:a,value:".\nA shell script allows you to store a set of shell commands (remember bash commands?) that can be done whenever the file is executed.\nTo start a shell script, we open a new file and write the following lines at the beginning."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"We will be writing to the "},{type:b,tag:e,props:{},children:[{type:a,value:j}]},{type:a,value:" file."}]},{type:a,value:c},{type:b,tag:A,props:{},children:[{type:a,value:"\nYou may notice that we named the file with a \n"},{type:b,tag:e,props:{},children:[{type:a,value:".sh"}]},{type:a,value:"\n extension. But we are doing this purely for convention\u002Fneatness sake, file extensions are not required for executables in Linux.\n\n"}]},{type:a,value:c},{type:b,tag:"div",props:{className:["nuxt-content-highlight"]},children:[{type:b,tag:"pre",props:{className:["language-bash","line-numbers"]},children:[{type:b,tag:e,props:{},children:[{type:b,tag:q,props:{className:["token","shebang","important"]},children:[{type:a,value:B}]},{type:a,value:c}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"This line may look weird at first, but its purpose is simple.\nAs mentioned, the Linux-based OS does not execute files based on their file extension (a concept that Windows users may be more familiar with), but rather, it reads the first few bytes of the file to identify what type of file it is!\nThese bytes are usually referred to as "},{type:b,tag:f,props:{},children:[{type:a,value:"magic bytes"}]},{type:a,value:C},{type:b,tag:m,props:{href:"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FList_of_file_signatures",rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:b,tag:f,props:{},children:[{type:a,value:"file signatures"}]}]},{type:a,value:p}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"For our file, the magic bytes we have are the "},{type:b,tag:e,props:{},children:[{type:a,value:D}]},{type:a,value:" (called \"shebang\"). And as you may read from the wikipedia reference, this magic bytes tells the OS that the file's data is supposed to be passed into the program that follows the "},{type:b,tag:e,props:{},children:[{type:a,value:D}]},{type:a,value:", in this case that will be "},{type:b,tag:e,props:{},children:[{type:a,value:r}]},{type:a,value:"! While we've been referring to bash as just bash, the full path that the bash executable is located on the system is usually* "},{type:b,tag:e,props:{},children:[{type:a,value:r}]},{type:a,value:p}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"If that was a lot to absorb, just know that this line tells our system, \"Hey I would like to run the following commands through the "},{type:b,tag:e,props:{},children:[{type:a,value:r}]},{type:a,value:" program!\""}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Now we can just write the shell commands that we want the script to perform.\nThe full script will look like so:"}]},{type:a,value:c},{type:b,tag:g,props:{lang:h},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:B}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"echo \"Let's learn about execution\"\necho \"We are currently in this directory:\"\npwd\necho \"Here are some files in the current directory\"\nls\necho \"See you!\""}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"To run the file, we need to change its "},{type:b,tag:k,props:{},children:[{type:a,value:"permissions"}]},{type:a,value:" to make it executable. (We will cover the permissions in a later lesson, for now just copy the command)"}]},{type:a,value:c},{type:b,tag:g,props:{lang:h},children:[{type:a,value:"\nchmod +x script.sh\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Then we can execute the script by writing the "},{type:b,tag:k,props:{},children:[{type:a,value:o}]},{type:a,value:" of the script as a command."}]},{type:a,value:c},{type:b,tag:g,props:{lang:h},children:[{type:a,value:"\n$ .\u002Fscript.sh\nLet's learn about execution\nWe are currently in this directory:\n\u002Ftmp\u002Fexec\nHere are some files in the current directory\nscript.sh\nSee you!\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Notice that in the previous example, we were present in the "},{type:b,tag:e,props:{},children:[{type:a,value:E}]},{type:a,value:" directory which contains the file "},{type:b,tag:e,props:{},children:[{type:a,value:F}]},{type:a,value:". Now let's try to use the script from another directory, since it wouldn't be very useful if it could only be used while the user is in a specific directory."}]},{type:a,value:c},{type:b,tag:g,props:{lang:h},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"$ cd \u002F"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"$ # [1]\n$ .\u002Fscript.sh\nbash: .\u002Fscript.sh: No such file or directory"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"$ # [2]\n$ script.sh\nscript.sh: command not found"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"We're faced with some errors!"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Now the first attempt "},{type:b,tag:f,props:{},children:[{type:a,value:"[1]"}]},{type:a,value:" fails because the "},{type:b,tag:e,props:{},children:[{type:a,value:j}]},{type:a,value:" is no longer in the same directory, therefore "},{type:b,tag:e,props:{},children:[{type:a,value:F}]},{type:a,value:" will refer to a file in the current directory which does not exist."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"How do we solve this? We have to provide the correct path for the script instead!"}]},{type:a,value:c},{type:b,tag:g,props:{lang:h},children:[{type:a,value:"\n$ \u002Ftmp\u002Fexec\u002Fscript.sh\nLet's learn about execution\nWe are currently in this directory:\n\u002F\nHere are some files in the current directory\nbin   cdrom  etc   lib\t  lib64   lost+found  mnt  proc  run   snap  swapfile  tmp  var\nboot  dev    home  lib32  libx32  media       opt  root  sbin  srv   sys       usr\nSee you!\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"What about the second attempt "},{type:b,tag:f,props:{},children:[{type:a,value:G}]},{type:a,value:", why did that fail? If we could execute the script through the syntax in "},{type:b,tag:f,props:{},children:[{type:a,value:G}]},{type:a,value:" that would be the most convenient for us as we don't have to remember the exact path of the script every time we wish to call it."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"In fact, when we run commands usually like "},{type:b,tag:e,props:{},children:[{type:a,value:n}]},{type:a,value:C},{type:b,tag:e,props:{},children:[{type:a,value:"id"}]},{type:a,value:", we don't make use of their full\u002Frelative paths, even though the executables actually exist somewhere in the file system."}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"$ ls\nscript.sh"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"$ \u002Fbin\u002Fls\nscript.sh"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"$ \u002Fdoes\u002Fnot\u002Fexist\u002Fls\nbash: \u002Fdoes\u002Fnot\u002Fexist\u002Fls: No such file or directory"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"What's the difference between the "},{type:b,tag:e,props:{},children:[{type:a,value:n}]},{type:a,value:" executable and our "},{type:b,tag:e,props:{},children:[{type:a,value:j}]},{type:a,value:" one? This is a useful concept called the "},{type:b,tag:f,props:{},children:[{type:a,value:i}]},{type:a,value:"!"}]},{type:a,value:c},{type:b,tag:v,props:{id:o},children:[{type:b,tag:m,props:{href:"#path",ariaHidden:w,tabIndex:x},children:[{type:b,tag:q,props:{className:[y,z]},children:[]}]},{type:a,value:i}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"If you recall the previous lesson about "},{type:b,tag:f,props:{},children:[{type:a,value:"environment variables"}]},{type:a,value:", these allow us to store key-value pairs that can be passed to child processes. A particularly important variable our command "},{type:b,tag:k,props:{},children:[{type:a,value:"shell"}]},{type:a,value:" makes use of is the "},{type:b,tag:e,props:{},children:[{type:a,value:"$PATH"}]},{type:a,value:" environment variable."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Let's take a look at what this variable looks like on our system!"}]},{type:a,value:c},{type:b,tag:g,props:{lang:h},children:[{type:a,value:"\n$ echo $PATH\n\u002Fhome\u002Fomu\u002F.local\u002Fbin:\u002Fusr\u002Flocal\u002Fsbin:\u002Fusr\u002Flocal\u002Fbin:\u002Fusr\u002Fsbin:\u002Fusr\u002Fbin:\u002Fsbin:\u002Fbin:\u002Fusr\u002Fgames:\u002Fusr\u002Flocal\u002Fgames:\u002Fsnap\u002Fbin\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"This may look confusing, but do you notice anything of interest?\nLet's split up the string to make it more readable."}]},{type:a,value:c},{type:b,tag:g,props:{lang:h},children:[{type:a,value:"\n$ echo $PATH | sed 's\u002F:\u002F\\n\u002Fg'\n\u002Fhome\u002Fctf\u002F.local\u002Fbin\n\u002Fusr\u002Flocal\u002Fsbin\n\u002Fusr\u002Flocal\u002Fbin\n\u002Fusr\u002Fsbin\n\u002Fusr\u002Fbin\n\u002Fsbin\n\u002Fbin\n\u002Fusr\u002Fgames\n\u002Fusr\u002Flocal\u002Fgames\n\u002Fsnap\u002Fbin\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"If you were observant, you can see that "},{type:b,tag:e,props:{},children:[{type:a,value:"\u002Fbin"}]},{type:a,value:" is listed here\nThis is exactly why we are able to run "},{type:b,tag:e,props:{},children:[{type:a,value:n}]},{type:a,value:" without specifying its relative\u002Fabsolute path!\nBut since the directory that our "},{type:b,tag:e,props:{},children:[{type:a,value:j}]},{type:a,value:" is contained in ("},{type:b,tag:e,props:{},children:[{type:a,value:E}]},{type:a,value:") does not exist here, we aren't able to run "},{type:b,tag:e,props:{},children:[{type:a,value:j}]},{type:a,value:" without specifying its proper path."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Searching online, we can find a nice definition of the PATH variable's functionality!"}]},{type:a,value:c},{type:b,tag:A,props:{},children:[{type:a,value:"\nThe PATH variable is an environment variable that contains an ordered list of paths that Linux will search for executables when running a command. Using these paths means that we do not have to specify an absolute path when running a command."},{type:b,tag:H,props:{},children:[]},{type:b,tag:H,props:{},children:[]},{type:a,value:c},{type:b,tag:m,props:{href:"https:\u002F\u002Fwww.baeldung.com\u002Flinux\u002Fpath-variable"},children:[{type:a,value:"baeldung.com"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Now we can try to add to the PATH to allow our "},{type:b,tag:e,props:{},children:[{type:a,value:j}]},{type:a,value:" to be used conveniently!"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"First, we analyse the format of the "},{type:b,tag:e,props:{},children:[{type:a,value:i}]},{type:a,value:" variable."}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:"PATH=\u003Cdir1\u003E:\u003Cdir2\u003E:...:\u003Cdirn\u003E"}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"As we can see, "},{type:b,tag:e,props:{},children:[{type:a,value:i}]},{type:a,value:" just contains a "},{type:b,tag:k,props:{},children:[{type:a,value:"colon-separated"}]},{type:a,value:" ("},{type:b,tag:e,props:{},children:[{type:a,value:I}]},{type:a,value:") list of directories for the command shell to search through to find whether the command we are calling exists."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Therefore, to add more directories to the PATH, we can jus add our directory to the front or the back of the variable, remembering to include the separating colon ("},{type:b,tag:e,props:{},children:[{type:a,value:I}]},{type:a,value:")."}]},{type:a,value:c},{type:b,tag:g,props:{lang:h},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"$ # Add \u002Ftmp\u002Fexec to PATH\n$ PATH=\u002Ftmp\u002Fexec:$PATH"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"$ # Try it out\n$ script.sh\nLet's learn about execution\nWe are currently in this directory:\n\u002F\nHere are some files in the current directory\nbin   cdrom  etc   lib\t  lib64   lost+found  mnt  proc  run   snap  swapfile  tmp  var\nboot  dev    home  lib32  libx32  media       opt  root  sbin  srv   sys       usr\nSee you!"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"With this knowledge, we can continue adding more of our custom executables and tooling to the PATH for ease of use."}]},{type:a,value:c},{type:b,tag:"quiz",props:{},children:[{type:a,value:J},{type:b,tag:"text-quiz",props:{answer:"\u002Fbin\u002Fls"},children:[{type:a,value:"\n      What is the "},{type:b,tag:f,props:{},children:[{type:a,value:"absolute"}]},{type:a,value:" path of the "},{type:b,tag:e,props:{},children:[{type:a,value:n}]},{type:a,value:" executable?\n    "}]},{type:a,value:J},{type:b,tag:"option-quiz",props:{answer:"1",":options":"['colon (:)', 'semicolon (;)', 'comma (,)', 'space ( )']"},children:[{type:a,value:"\n      What is the separator used to separate directory paths in the "},{type:b,tag:e,props:{},children:[{type:a,value:i}]},{type:a,value:" variable?\n    "}]},{type:a,value:c}]}]},dir:K,path:"\u002Flessons\u002Flinux-basics\u002Fexecution",extension:".md",createdAt:L,updatedAt:L},module:{slug:"linux-basics",title:l,desc:"Learn the basics of operating a Linux-based operating system (OS) and take your first steps in exploitation in a Linux environment!",diff:"Easy",order:1,toc:[],dir:"\u002Flessons",path:K},prev:{slug:"variables",module:l,title:"Environment Variables",desc:"For configuration and more \u003E:)"},next:{slug:"users-permissions",module:l,title:"Users and Permissions",desc:"Basic security features across Linux distributions"},isLesson:true,title:"Execution | Linux Basics",challenges:[]}],fetch:{},mutations:void 0}}("text","element","\n","p","code","strong","code-block","bash","PATH","script.sh","em","Linux Basics","a","ls","path",".","span","\u002Fbin\u002Fbash","shell-scripts",2,"Shell scripts","h2","true",-1,"icon","icon-link","info-box","#!\u002Fbin\u002Fbash"," or ","#!","\u002Ftmp\u002Fexec",".\u002Fscript.sh","[2]","br",":","\n    ","\u002Flessons\u002Flinux-basics","2021-10-09T10:05:21.244Z")));