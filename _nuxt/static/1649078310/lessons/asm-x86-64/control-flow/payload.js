__NUXT_JSONP__("/lessons/asm-x86-64/control-flow", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW){return {data:[{content:{slug:"control-flow",layout:"lesson",module:ag,title:"Control Flow",desc:"Jumping around",order:6,omulator:az,toc:[{id:aA,depth:M,text:aB},{id:aC,depth:M,text:aD},{id:ah,depth:M,text:aE},{id:aF,depth:M,text:aG}],body:{type:"root",children:[{type:d,tag:l,props:{},children:[{type:a,value:"So far, all our programs have been "},{type:d,tag:N,props:{},children:[{type:a,value:"linear"}]},{type:a,value:", meaning that they run from the first instruction to the last instruction without any change.\nThis is great for simple programs, but it is very inefficient\u002Fimpossible when we start to use programming concepts like loops or if\u002Felse statements."}]},{type:a,value:i},{type:d,tag:Q,props:{id:aA},children:[{type:d,tag:E,props:{href:"#loops",ariaHidden:R,tabIndex:S},children:[{type:d,tag:g,props:{className:[T,U]},children:[]}]},{type:a,value:aB}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"Let's try to use our existing knowledge to create a function like this."}]},{type:a,value:i},{type:d,tag:V,props:{className:[W]},children:[{type:d,tag:X,props:{className:[Y,ai]},children:[{type:d,tag:j,props:{},children:[{type:d,tag:g,props:{className:[h,o]},children:[{type:a,value:s}]},{type:a,value:p},{type:d,tag:g,props:{className:[h,F]},children:[{type:a,value:aj}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:G}]},{type:d,tag:g,props:{className:[h,o]},children:[{type:a,value:s}]},{type:a,value:H},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:I}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:J}]},{type:a,value:y},{type:d,tag:g,props:{className:[h,o]},children:[{type:a,value:ak}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:G}]},{type:d,tag:g,props:{className:[h,o]},children:[{type:a,value:s}]},{type:a,value:K},{type:d,tag:g,props:{className:[h,q]},children:[{type:a,value:al}]},{type:a,value:p},{type:d,tag:g,props:{className:[h,t]},children:[{type:a,value:Z}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:z}]},{type:a,value:K},{type:d,tag:g,props:{className:[h,q]},children:[{type:a,value:am}]},{type:a,value:p},{type:d,tag:g,props:{className:[h,t]},children:[{type:a,value:aH}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:z}]},{type:a,value:an},{type:d,tag:g,props:{className:[h,q]},children:[{type:a,value:ao}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:I}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:J}]},{type:a,value:ap},{type:d,tag:g,props:{className:[h,q]},children:[{type:a,value:aq}]},{type:a,value:p},{type:d,tag:g,props:{className:[h,t]},children:[{type:a,value:O}]},{type:a,value:y},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:L}]},{type:a,value:y},{type:d,tag:g,props:{className:[h,o]},children:[{type:a,value:ar}]},{type:a,value:H},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:z}]},{type:a,value:i},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:L}]},{type:a,value:i}]}]}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"To provide context, our argument "},{type:d,tag:j,props:{},children:[{type:a,value:E}]},{type:a,value:" will come from the "},{type:d,tag:j,props:{},children:[{type:a,value:P}]},{type:a,value:" register, and we will \"return\" the final value into the "},{type:d,tag:j,props:{},children:[{type:a,value:aI}]},{type:a,value:" register.\nIf "},{type:d,tag:j,props:{},children:[{type:a,value:P}]},{type:a,value:" starts at 0, our assembly snippet should thus end with "},{type:d,tag:j,props:{},children:[{type:a,value:"rax = 5"}]},{type:a,value:as}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"A naive attempt would lead us to the following code snippet."}]},{type:a,value:i},{type:d,tag:_,props:{"initial-code":"\nadd rdi, 1\nadd rdi, 1\nadd rdi, 1\nadd rdi, 1\nadd rdi, 1\nmov rax, rdi\n"},children:[{type:a,value:$}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"And this in fact works very well."}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"However, what if our loop was dynamic?"}]},{type:a,value:i},{type:d,tag:V,props:{className:[W]},children:[{type:d,tag:X,props:{className:[Y,ai]},children:[{type:d,tag:j,props:{},children:[{type:d,tag:g,props:{className:[h,o]},children:[{type:a,value:s}]},{type:a,value:p},{type:d,tag:g,props:{className:[h,F]},children:[{type:a,value:aj}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:G}]},{type:d,tag:g,props:{className:[h,o]},children:[{type:a,value:s}]},{type:a,value:H},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:aJ}]},{type:a,value:p},{type:d,tag:g,props:{className:[h,o]},children:[{type:a,value:s}]},{type:a,value:aa},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:I}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:J}]},{type:a,value:y},{type:d,tag:g,props:{className:[h,o]},children:[{type:a,value:ak}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:G}]},{type:d,tag:g,props:{className:[h,o]},children:[{type:a,value:s}]},{type:a,value:K},{type:d,tag:g,props:{className:[h,q]},children:[{type:a,value:al}]},{type:a,value:p},{type:d,tag:g,props:{className:[h,t]},children:[{type:a,value:Z}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:z}]},{type:a,value:K},{type:d,tag:g,props:{className:[h,q]},children:[{type:a,value:am}]},{type:a,value:aa},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:z}]},{type:a,value:an},{type:d,tag:g,props:{className:[h,q]},children:[{type:a,value:ao}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:I}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:J}]},{type:a,value:ap},{type:d,tag:g,props:{className:[h,q]},children:[{type:a,value:aq}]},{type:a,value:p},{type:d,tag:g,props:{className:[h,t]},children:[{type:a,value:O}]},{type:a,value:y},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:L}]},{type:a,value:y},{type:d,tag:g,props:{className:[h,o]},children:[{type:a,value:ar}]},{type:a,value:H},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:z}]},{type:a,value:i},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:L}]},{type:a,value:i}]}]}]},{type:a,value:i},{type:d,tag:at,props:{},children:[{type:a,value:"\nArgument \n"},{type:d,tag:j,props:{},children:[{type:a,value:"\nb\n"}]},{type:a,value:"\n will be in register \n"},{type:d,tag:j,props:{},children:[{type:a,value:"\nrsi\n"}]},{type:a,value:i}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"Now, we're in trouble.\nWe do not know how many times we need to create the "},{type:d,tag:j,props:{},children:[{type:a,value:"add rdi, 1"}]},{type:a,value:" instruction, as it is dependent on the value of "},{type:d,tag:j,props:{},children:[{type:a,value:au}]},{type:a,value:as}]},{type:a,value:i},{type:d,tag:Q,props:{id:aC},children:[{type:d,tag:E,props:{href:"#let-there-be-jumps",ariaHidden:R,tabIndex:S},children:[{type:d,tag:g,props:{className:[T,U]},children:[]}]},{type:a,value:aD}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"This is where we need to learn more instructions!"}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"The family of instructions we need here are "},{type:d,tag:N,props:{},children:[{type:a,value:aK}]},{type:a,value:".\nThere are a variety of jumps, but the simplest to understand is "},{type:d,tag:j,props:{},children:[{type:a,value:ab}]},{type:a,value:as}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:d,tag:j,props:{},children:[{type:a,value:ab}]},{type:a,value:" takes one operand, which is the memory (relative address) \u002F register that you shold jump to.\nIt'd be easiest to understand this through an example.\nHere is an infinite loop (do not use "},{type:d,tag:j,props:{},children:[{type:a,value:"Play"}]},{type:a,value:", only "},{type:d,tag:j,props:{},children:[{type:a,value:"Step"}]},{type:a,value:" through)."}]},{type:a,value:i},{type:d,tag:_,props:{"initial-code":"\nloop:\nadd rdi, 1\njmp loop\n"},children:[{type:a,value:$}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"You can observe that "},{type:d,tag:j,props:{},children:[{type:a,value:P}]},{type:a,value:"'s value will increment forever*!\nWith "},{type:d,tag:j,props:{},children:[{type:a,value:ab}]},{type:a,value:", we've managed to create non-linear code execution, allowing for constructs such as loops."}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"Obviously, we've still not been able to replicate the C code snippet, but we're getting closer!"}]},{type:a,value:i},{type:d,tag:Q,props:{id:ah},children:[{type:d,tag:E,props:{href:"#comparisons",ariaHidden:R,tabIndex:S},children:[{type:d,tag:g,props:{className:[T,U]},children:[]}]},{type:a,value:aE}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"The next class of instructions we require are comparison operators.\nThere are a whole group of them, but in general they just aid to perform comparisons between two operands."}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"The "},{type:d,tag:j,props:{},children:[{type:a,value:aL}]},{type:a,value:" instruction takes 2 operands, and compares their value.\nIt will then implicitly set a special register called "},{type:d,tag:j,props:{},children:[{type:a,value:av}]},{type:a,value:" according to the result of the comparison.\nThen, future instructions can check the "},{type:d,tag:j,props:{},children:[{type:a,value:av}]},{type:a,value:" register to determine the result of the comparison that just occured.\nWe will not delve into the details to prevent too much confusion, but you can read more about this special register here ("},{type:d,tag:E,props:{href:"https:\u002F\u002Fwiki.osdev.org\u002FCPU_Registers_x86-64#RFLAGS_Register",rel:[aM,aN,aO],target:aP},children:[{type:d,tag:j,props:{},children:[{type:a,value:av}]}]},{type:a,value:aw}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"Here, we show the instruction in action!"}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"We will be using the "},{type:d,tag:j,props:{},children:[{type:a,value:ax}]},{type:a,value:" instruction, which is the "},{type:d,tag:N,props:{},children:[{type:a,value:aQ}]},{type:a,value:" type of jump.\nAs its name suggests, it only jumps if the previous comparison has equal operands, if not it will do a single step as usual."}]},{type:a,value:i},{type:d,tag:_,props:{"initial-code":"\nmov rax, 0xdead\nmov rbx, 0xdead\ncmp rax, rbx\nje equal\nnot_equal:\n mov rcx, 0x111\n jmp end\nequal:\n mov rcx, 0xfff\n jmp end\nend:\n hlt\n",":reg-inits":"{'rax': 0x1234, 'rbx': 0xbeef}"},children:[{type:a,value:$}]},{type:a,value:i},{type:d,tag:at,props:{},children:[{type:a,value:"\nTry changing the code above to modify the values of \n"},{type:d,tag:j,props:{},children:[{type:a,value:"\nrax\n"}]},{type:a,value:"\n or \n"},{type:d,tag:j,props:{},children:[{type:a,value:"\nrbx\n"}]},{type:a,value:i},{type:d,tag:"br",props:{},children:[]},{type:a,value:"\nHow will the code run differently?\n"}]},{type:a,value:i},{type:d,tag:Q,props:{id:aF},children:[{type:d,tag:E,props:{href:"#bring-it-all-together",ariaHidden:R,tabIndex:S},children:[{type:d,tag:g,props:{className:[T,U]},children:[]}]},{type:a,value:aG}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"Now that we understand these two core concepts of "},{type:d,tag:N,props:{},children:[{type:a,value:aK}]},{type:a,value:" and "},{type:d,tag:N,props:{},children:[{type:a,value:ah}]},{type:a,value:", let's try to piece it together to create our function defined above."}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"See if you can implement it yourself!\nThis can be done using the instructions we've covered thus far (reminder: "},{type:d,tag:j,props:{},children:[{type:a,value:aL}]},{type:a,value:u},{type:d,tag:j,props:{},children:[{type:a,value:ax}]},{type:a,value:u},{type:d,tag:j,props:{},children:[{type:a,value:ab}]},{type:a,value:u},{type:d,tag:j,props:{},children:[{type:a,value:"mov"}]},{type:a,value:aw}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"But if you need extra instructions, here's some more useful \"jumps\" we can provide you with ("},{type:d,tag:E,props:{href:"https:\u002F\u002Fwww.felixcloutier.com\u002Fx86\u002Fjcc",rel:[aM,aN,aO],target:aP},children:[{type:a,value:"reference"}]},{type:a,value:aw}]},{type:a,value:"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{type:d,tag:"table",props:{},children:[{type:d,tag:"thead",props:{},children:[{type:d,tag:v,props:{},children:[{type:d,tag:aR,props:{align:w},children:[{type:a,value:"Instruction"}]},{type:d,tag:aR,props:{align:x},children:[{type:a,value:"Purpose"}]}]}]},{type:d,tag:"tbody",props:{},children:[{type:d,tag:v,props:{},children:[{type:d,tag:n,props:{align:w},children:[{type:d,tag:j,props:{},children:[{type:a,value:"ja"}]}]},{type:d,tag:n,props:{align:x},children:[{type:a,value:"jump if above"}]}]},{type:d,tag:v,props:{},children:[{type:d,tag:n,props:{align:w},children:[{type:d,tag:j,props:{},children:[{type:a,value:"jae"}]}]},{type:d,tag:n,props:{align:x},children:[{type:a,value:"jump if above or equal"}]}]},{type:d,tag:v,props:{},children:[{type:d,tag:n,props:{align:w},children:[{type:d,tag:j,props:{},children:[{type:a,value:"jb"}]}]},{type:d,tag:n,props:{align:x},children:[{type:a,value:"jump if below"}]}]},{type:d,tag:v,props:{},children:[{type:d,tag:n,props:{align:w},children:[{type:d,tag:j,props:{},children:[{type:a,value:"jbe"}]}]},{type:d,tag:n,props:{align:x},children:[{type:a,value:"jump if below or equal"}]}]},{type:d,tag:v,props:{},children:[{type:d,tag:n,props:{align:w},children:[{type:d,tag:j,props:{},children:[{type:a,value:ax}]}]},{type:d,tag:n,props:{align:x},children:[{type:a,value:aQ}]}]},{type:d,tag:v,props:{},children:[{type:d,tag:n,props:{align:w},children:[{type:d,tag:j,props:{},children:[{type:a,value:"jg"}]}]},{type:d,tag:n,props:{align:x},children:[{type:a,value:"jump if greater"}]}]},{type:d,tag:v,props:{},children:[{type:d,tag:n,props:{align:w},children:[{type:d,tag:j,props:{},children:[{type:a,value:"jge"}]}]},{type:d,tag:n,props:{align:x},children:[{type:a,value:"jump if greater or equal"}]}]},{type:d,tag:v,props:{},children:[{type:d,tag:n,props:{align:w},children:[{type:d,tag:j,props:{},children:[{type:a,value:"jl"}]}]},{type:d,tag:n,props:{align:x},children:[{type:a,value:"jump if lesser"}]}]},{type:d,tag:v,props:{},children:[{type:d,tag:n,props:{align:w},children:[{type:d,tag:j,props:{},children:[{type:a,value:"jle"}]}]},{type:d,tag:n,props:{align:x},children:[{type:a,value:"jump if lesser or equal"}]}]}]}]},{type:a,value:i},{type:d,tag:at,props:{},children:[{type:a,value:"\nAfter\u002Fbelow are the unsigned equivalents of greater\u002Flesser (signed).\n"}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"For reference, we are trying to recreate the following function ("},{type:d,tag:j,props:{},children:[{type:a,value:"rdi=a"}]},{type:a,value:u},{type:d,tag:j,props:{},children:[{type:a,value:"rsi=b"}]},{type:a,value:u},{type:d,tag:j,props:{},children:[{type:a,value:"rax=return_value"}]},{type:a,value:"):"}]},{type:a,value:i},{type:d,tag:V,props:{className:[W]},children:[{type:d,tag:X,props:{className:[Y,ai]},children:[{type:d,tag:j,props:{},children:[{type:d,tag:g,props:{className:[h,o]},children:[{type:a,value:s}]},{type:a,value:p},{type:d,tag:g,props:{className:[h,F]},children:[{type:a,value:aj}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:G}]},{type:d,tag:g,props:{className:[h,o]},children:[{type:a,value:s}]},{type:a,value:H},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:aJ}]},{type:a,value:p},{type:d,tag:g,props:{className:[h,o]},children:[{type:a,value:s}]},{type:a,value:aa},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:I}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:J}]},{type:a,value:y},{type:d,tag:g,props:{className:[h,o]},children:[{type:a,value:ak}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:G}]},{type:d,tag:g,props:{className:[h,o]},children:[{type:a,value:s}]},{type:a,value:K},{type:d,tag:g,props:{className:[h,q]},children:[{type:a,value:al}]},{type:a,value:p},{type:d,tag:g,props:{className:[h,t]},children:[{type:a,value:Z}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:z}]},{type:a,value:K},{type:d,tag:g,props:{className:[h,q]},children:[{type:a,value:am}]},{type:a,value:aa},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:z}]},{type:a,value:an},{type:d,tag:g,props:{className:[h,q]},children:[{type:a,value:ao}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:I}]},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:J}]},{type:a,value:ap},{type:d,tag:g,props:{className:[h,q]},children:[{type:a,value:aq}]},{type:a,value:p},{type:d,tag:g,props:{className:[h,t]},children:[{type:a,value:O}]},{type:a,value:y},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:L}]},{type:a,value:y},{type:d,tag:g,props:{className:[h,o]},children:[{type:a,value:ar}]},{type:a,value:H},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:z}]},{type:a,value:i},{type:d,tag:g,props:{className:[h,k]},children:[{type:a,value:L}]},{type:a,value:i}]}]}]},{type:a,value:i},{type:d,tag:l,props:{},children:[{type:a,value:"Edit the following omulator box to write and debug your answer:"}]},{type:a,value:i},{type:d,tag:_,props:{"initial-code":"\nnop\nnop\nnop\n",":reg-inits":"{'rdi': 0x40, 'rsi': 0x5}"},children:[{type:a,value:$}]},{type:a,value:i},{type:d,tag:"spoiler",props:{title:"Click for answer"},children:[{type:a,value:i},{type:d,tag:V,props:{className:[W]},children:[{type:d,tag:X,props:{className:[Y,"language-nasm"]},children:[{type:d,tag:j,props:{},children:[{type:a,value:"mov "},{type:d,tag:g,props:{className:[h,A,B]},children:[{type:a,value:au}]},{type:a,value:u},{type:d,tag:g,props:{className:[h,t]},children:[{type:a,value:aH}]},{type:a,value:aS},{type:d,tag:g,props:{className:[h,A,B]},children:[{type:a,value:ay}]},{type:a,value:u},{type:d,tag:g,props:{className:[h,t]},children:[{type:a,value:Z}]},{type:a,value:i},{type:d,tag:g,props:{className:[h,ac,F]},children:[{type:a,value:"loop:"}]},{type:a,value:i},{type:d,tag:g,props:{className:[h,ac,F]},children:[{type:a,value:"compare:"}]},{type:a,value:"\ncmp "},{type:d,tag:g,props:{className:[h,A,B]},children:[{type:a,value:ay}]},{type:a,value:u},{type:d,tag:g,props:{className:[h,A,B]},children:[{type:a,value:au}]},{type:a,value:"\njl increment\njmp end\n"},{type:d,tag:g,props:{className:[h,ac,F]},children:[{type:a,value:"increment:"}]},{type:a,value:aT},{type:d,tag:g,props:{className:[h,A,B]},children:[{type:a,value:P}]},{type:a,value:u},{type:d,tag:g,props:{className:[h,t]},children:[{type:a,value:O}]},{type:a,value:aT},{type:d,tag:g,props:{className:[h,A,B]},children:[{type:a,value:ay}]},{type:a,value:u},{type:d,tag:g,props:{className:[h,t]},children:[{type:a,value:O}]},{type:a,value:"\njmp loop\n"},{type:d,tag:g,props:{className:[h,ac,F]},children:[{type:a,value:"end:"}]},{type:a,value:aS},{type:d,tag:g,props:{className:[h,A,B]},children:[{type:a,value:aI}]},{type:a,value:u},{type:d,tag:g,props:{className:[h,A,B]},children:[{type:a,value:P}]},{type:a,value:i}]}]}]},{type:a,value:i}]}]},dir:aU,path:"\u002Flessons\u002Fasm-x86-64\u002Fcontrol-flow",extension:".md",createdAt:aV,updatedAt:aV},module:{slug:"asm-x86-64",title:ag,desc:"Learn about the assembly language understood by our home computers",diff:"Easy",order:M,toc:[],dir:"\u002Flessons",path:aU},prev:{slug:"operators",module:ag,title:"Operators",desc:"Perform operations on data"},next:aW,isLesson:az,title:"Control Flow | ASM (x86-64)",challenges:[]}],fetch:{"MiniOmulator:0":{runLine:ad,error:r,ready:e,code:r,editorRO:m,codeDecorationIDs:[],runLineDecoration:m,codeAddressCSS:m,codeAddressDecorations:{},codeMouseUpDisposable:m,breakpointDecorationIDs:[],locked:e,show_address:e,omulator:m,registers:{rax:f,rbx:f,rcx:f,rdx:f,rdi:f,rsi:f,r8:f,r9:f,r10:f,r11:f,r12:f,r13:f,r14:f,r15:f,rbp:C,rsp:C,rip:ae},rbp:D,rsp:D,rip:af,rax_changed:e,rbx_changed:e,rcx_changed:e,rdx_changed:e,rdi_changed:e,rsi_changed:e,r8_changed:e,r9_changed:e,r10_changed:e,r11_changed:e,r12_changed:e,r13_changed:e,r14_changed:e,r15_changed:e,rbp_changed:e,rsp_changed:e,rip_changed:e,stack:[f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f],stack_changed:[e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e],mm_input_hex:[b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b],mm_output_hex:[b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b],mm_input_utf:[c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c],mm_output_utf:[c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c],is_editing:e,input_edit_field:r,hasTests:e,showTests:e,tests:[],testResults:[]},"MiniOmulator:1":{runLine:ad,error:r,ready:e,code:r,editorRO:m,codeDecorationIDs:[],runLineDecoration:m,codeAddressCSS:m,codeAddressDecorations:{},codeMouseUpDisposable:m,breakpointDecorationIDs:[],locked:e,show_address:e,omulator:m,registers:{rax:f,rbx:f,rcx:f,rdx:f,rdi:f,rsi:f,r8:f,r9:f,r10:f,r11:f,r12:f,r13:f,r14:f,r15:f,rbp:C,rsp:C,rip:ae},rbp:D,rsp:D,rip:af,rax_changed:e,rbx_changed:e,rcx_changed:e,rdx_changed:e,rdi_changed:e,rsi_changed:e,r8_changed:e,r9_changed:e,r10_changed:e,r11_changed:e,r12_changed:e,r13_changed:e,r14_changed:e,r15_changed:e,rbp_changed:e,rsp_changed:e,rip_changed:e,stack:[f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f],stack_changed:[e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e],mm_input_hex:[b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b],mm_output_hex:[b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b],mm_input_utf:[c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c],mm_output_utf:[c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c],is_editing:e,input_edit_field:r,hasTests:e,showTests:e,tests:[],testResults:[]},"MiniOmulator:2":{runLine:ad,error:r,ready:e,code:r,editorRO:m,codeDecorationIDs:[],runLineDecoration:m,codeAddressCSS:m,codeAddressDecorations:{},codeMouseUpDisposable:m,breakpointDecorationIDs:[],locked:e,show_address:e,omulator:m,registers:{rax:f,rbx:f,rcx:f,rdx:f,rdi:f,rsi:f,r8:f,r9:f,r10:f,r11:f,r12:f,r13:f,r14:f,r15:f,rbp:C,rsp:C,rip:ae},rbp:D,rsp:D,rip:af,rax_changed:e,rbx_changed:e,rcx_changed:e,rdx_changed:e,rdi_changed:e,rsi_changed:e,r8_changed:e,r9_changed:e,r10_changed:e,r11_changed:e,r12_changed:e,r13_changed:e,r14_changed:e,r15_changed:e,rbp_changed:e,rsp_changed:e,rip_changed:e,stack:[f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f],stack_changed:[e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e],mm_input_hex:[b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b],mm_output_hex:[b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b],mm_input_utf:[c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c],mm_output_utf:[c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c],is_editing:e,input_edit_field:r,hasTests:e,showTests:e,tests:[],testResults:[]},"MiniOmulator:3":{runLine:ad,error:r,ready:e,code:r,editorRO:m,codeDecorationIDs:[],runLineDecoration:m,codeAddressCSS:m,codeAddressDecorations:{},codeMouseUpDisposable:m,breakpointDecorationIDs:[],locked:e,show_address:e,omulator:m,registers:{rax:f,rbx:f,rcx:f,rdx:f,rdi:f,rsi:f,r8:f,r9:f,r10:f,r11:f,r12:f,r13:f,r14:f,r15:f,rbp:C,rsp:C,rip:ae},rbp:D,rsp:D,rip:af,rax_changed:e,rbx_changed:e,rcx_changed:e,rdx_changed:e,rdi_changed:e,rsi_changed:e,r8_changed:e,r9_changed:e,r10_changed:e,r11_changed:e,r12_changed:e,r13_changed:e,r14_changed:e,r15_changed:e,rbp_changed:e,rsp_changed:e,rip_changed:e,stack:[f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f],stack_changed:[e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e],mm_input_hex:[b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b],mm_output_hex:[b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b],mm_input_utf:[c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c],mm_output_utf:[c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c],is_editing:e,input_edit_field:r,hasTests:e,showTests:e,tests:[],testResults:[]}},mutations:aW}}("text","00 00 00 00 00 00 00 00","........","element",false,0,"span","token","\n","code","punctuation","p",null,"td","keyword"," ","operator","","int","number",", ","tr","center","left","\n    ",";","register","variable",65280,65280,"a","function","("," a",")","{"," i ","}",2,"strong","1","rdi","h2","true",-1,"icon","icon-link","div","nuxt-content-highlight","pre","line-numbers","0","mini-omulator","\n\n\n"," b","jmp","label",1,4194304,4194304,"ASM (x86-64)","comparisons","language-c","foo","for","=","\u003C"," i","++","\n        a ","+=","return",".","info-box","rsi","RFLAGS",").","je","rbx",true,"loops","Loops","let-there-be-jumps","Let there be jumps","Comparisons","bring-it-all-together","Bring it all together","5","rax",",","jumps","cmp","nofollow","noopener","noreferrer","_blank","jump if equal","th","\nmov ","\nadd ","\u002Flessons\u002Fasm-x86-64","2022-04-04T13:16:21.393Z",void 0)));