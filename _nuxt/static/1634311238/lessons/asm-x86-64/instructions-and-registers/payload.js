__NUXT_JSONP__("/lessons/asm-x86-64/instructions-and-registers", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq){return {data:[{content:{slug:"instructions-and-registers",layout:"lesson",module:D,title:"Instructions and Registers",desc:"Learn about instructions and registers",order:n,omulator:M,toc:[{id:N,depth:n,text:O},{id:P,depth:n,text:Q},{id:R,depth:n,text:S},{id:T,depth:n,text:U},{id:V,depth:n,text:W},{id:X,depth:n,text:Y}],body:{type:"root",children:[{type:b,tag:g,props:{},children:[{type:a,value:"x86-64 refers to the 64-bit version of the x86 CPU architecture implemented by many CPU manufacturers.\nAssembly programs consist of an arrangement of "},{type:b,tag:i,props:{},children:[{type:a,value:"instructions"}]},{type:a,value:" that will be executed by the CPU to interact with "},{type:b,tag:i,props:{},children:[{type:a,value:"memory"}]},{type:a,value:" and "},{type:b,tag:i,props:{},children:[{type:a,value:Z}]},{type:a,value:_}]},{type:a,value:c},{type:b,tag:t,props:{id:N},children:[{type:b,tag:u,props:{ariaHidden:v,href:"#what-are-instructions",tabIndex:w},children:[{type:b,tag:d,props:{className:[x,y]},children:[]}]},{type:a,value:O}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"Instructions are the lowest-level unit of execution that the CPU interprets and executes.\nThere are a wide variety of possible instructions and it would be impossible to cover all of them."}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"The CPU will execute instructions from lower addresses to high addresses, with a special register "},{type:b,tag:i,props:{},children:[{type:a,value:l}]},{type:a,value:" that indicates the address of the instruction being executed.\nThis may sound confusing, but it is actually very similar to how humans read recipes, from the start of the recipe (low address) to the end of the recipe (high address), doing one step(instruction) at a time."}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:b,tag:"img",props:{alt:"",src:"\u002Flessons\u002Fasm-x86-64\u002Finstructions-and-registers\u002FRecipe.png"},children:[]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"Let's take a look at an assembly code example from the previous lesson."}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:m,props:{className:[q,$]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"push    "},{type:b,tag:d,props:{className:[e,j,k]},children:[{type:a,value:s}]},{type:a,value:J},{type:b,tag:d,props:{className:[e,j,k]},children:[{type:a,value:s}]},{type:a,value:B},{type:b,tag:d,props:{className:[e,j,k]},children:[{type:a,value:"rsp"}]},{type:a,value:aa},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:E}]},{type:b,tag:d,props:{className:[e,j,k]},children:[{type:a,value:s}]},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:F}]},{type:b,tag:d,props:{className:[e,G]},children:[{type:a,value:K}]},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:H}]},{type:a,value:B},{type:b,tag:d,props:{className:[e,j,k]},children:[{type:a,value:"edi"}]},{type:a,value:aa},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:E}]},{type:b,tag:d,props:{className:[e,j,k]},children:[{type:a,value:s}]},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:F}]},{type:b,tag:d,props:{className:[e,G]},children:[{type:a,value:ab}]},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:H}]},{type:a,value:B},{type:b,tag:d,props:{className:[e,j,k]},children:[{type:a,value:"esi"}]},{type:a,value:J},{type:b,tag:d,props:{className:[e,j,k]},children:[{type:a,value:ac}]},{type:a,value:ad},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:E}]},{type:b,tag:d,props:{className:[e,j,k]},children:[{type:a,value:s}]},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:F}]},{type:b,tag:d,props:{className:[e,G]},children:[{type:a,value:K}]},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:H}]},{type:a,value:J},{type:b,tag:d,props:{className:[e,j,k]},children:[{type:a,value:ae}]},{type:a,value:ad},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:E}]},{type:b,tag:d,props:{className:[e,j,k]},children:[{type:a,value:s}]},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:F}]},{type:b,tag:d,props:{className:[e,G]},children:[{type:a,value:ab}]},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:H}]},{type:a,value:"\nadd     "},{type:b,tag:d,props:{className:[e,j,k]},children:[{type:a,value:ae}]},{type:a,value:B},{type:b,tag:d,props:{className:[e,j,k]},children:[{type:a,value:ac}]},{type:a,value:"\npop     "},{type:b,tag:d,props:{className:[e,j,k]},children:[{type:a,value:s}]},{type:a,value:"\nret\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"When the CPU executes this code, it will start from the first instruction "},{type:b,tag:f,props:{},children:[{type:a,value:"push rbp"}]},{type:a,value:" and keep executing one instruction at a time till it eventually reaches the last instruction "},{type:b,tag:f,props:{},children:[{type:a,value:"ret"}]},{type:a,value:". As each instruction gets executed, the special "},{type:b,tag:f,props:{},children:[{type:a,value:l}]},{type:a,value:" register will be incremented accordingly to point to the next instruction, if this sounds confusing it will be explained shortly."}]},{type:a,value:c},{type:b,tag:t,props:{id:P},children:[{type:b,tag:u,props:{ariaHidden:v,href:"#babys-first-instruction",tabIndex:w},children:[{type:b,tag:d,props:{className:[x,y]},children:[]}]},{type:a,value:Q}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"While you may have been introduced to a variety of instructions from the past few examples, the first instruction we will explicitly go through is the "},{type:b,tag:f,props:{},children:[{type:a,value:L}]},{type:a,value:af}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:ag},{type:b,tag:f,props:{},children:[{type:a,value:L}]},{type:a,value:" serves an important functionality, it does "},{type:b,tag:i,props:{},children:[{type:a,value:"nothing"}]},{type:a,value:af}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"Here is a sample assembly code snippet showcasing the "},{type:b,tag:f,props:{},children:[{type:a,value:L}]},{type:a,value:"s function:"}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:m,props:{className:[q,z]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"nop\nnop\nnop\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"After this code runs, nothing happens (except for "},{type:b,tag:f,props:{},children:[{type:a,value:l}]},{type:a,value:" increasing)."}]},{type:a,value:c},{type:b,tag:t,props:{id:R},children:[{type:b,tag:u,props:{ariaHidden:v,href:"#what-are-registers",tabIndex:w},children:[{type:b,tag:d,props:{className:[x,y]},children:[]}]},{type:a,value:S}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"Before we continue introducing more instructions, it will be important to go through the concept of "},{type:b,tag:i,props:{},children:[{type:a,value:Z}]},{type:a,value:".\nIn traditional programming, you should have learnt about the concept of variables.\nVariables are temporary constructs that store information for intermediate calculations and operations.\nRegisters behave very similarly, but only store certain data types, and they store information in the CPU itself!"}]},{type:a,value:c},{type:b,tag:ah,props:{},children:[{type:a,value:"\nIn the previous lesson's example of Bob the Chef, registers are like the bowls!\n"}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"In the x86-64 architecture CPUs, there are a few groups of registers: general-purpose, segment, and EFLAGS registers.\nOn 64-bit systems like the x86-64, most registers will store and represent values using 64-bits of storage."}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"Here is a table of the register names."}]},{type:a,value:"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{type:b,tag:"table",props:{},children:[{type:b,tag:"thead",props:{},children:[{type:b,tag:I,props:{},children:[{type:b,tag:ai,props:{align:r},children:[{type:a,value:"Register Type"}]},{type:b,tag:ai,props:{align:r},children:[{type:a,value:"Register Names"}]}]}]},{type:b,tag:"tbody",props:{},children:[{type:b,tag:I,props:{},children:[{type:b,tag:A,props:{align:r},children:[{type:a,value:aj}]},{type:b,tag:A,props:{align:r},children:[{type:a,value:"RAX, RBX, RCX, RDX, RDI, RSI, RBP, RSP, R8-R15"}]}]},{type:b,tag:I,props:{},children:[{type:b,tag:A,props:{align:r},children:[{type:a,value:ak}]},{type:b,tag:A,props:{align:r},children:[{type:a,value:"ES, CS, SS, DS, FS"}]}]},{type:b,tag:I,props:{},children:[{type:b,tag:A,props:{align:r},children:[{type:a,value:"*EFLAGS"}]},{type:b,tag:A,props:{align:r},children:[{type:a,value:"CF, PF, AF, ZF, SF ..."}]}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"*EFLAGS \"registers\" are bit-flags on the same register."}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:b,tag:i,props:{},children:[{type:a,value:aj}]},{type:a,value:" registers are used for storage of intermediate values, simple integer calculations, and used as memory pointers. The "},{type:b,tag:f,props:{},children:[{type:a,value:"RSP"}]},{type:a,value:" register has some unique properties that will be discussed later, and generally isn't used the same way as other general-purpose registers."}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:b,tag:i,props:{},children:[{type:a,value:ak}]},{type:a,value:" registers are a more advanced concept that will not be discussed for now. Most simple assembly programs will not need to deal with these."}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:b,tag:i,props:{},children:[{type:a,value:"EFLAGS"}]},{type:a,value:" is a special register used for control-flow that will be discussed in a future lesson. Generally, this register is not directly operated on, but rather is modified as a side effect of instructions."}]},{type:a,value:c},{type:b,tag:t,props:{id:T},children:[{type:b,tag:u,props:{ariaHidden:v,href:"#using-registers",tabIndex:w},children:[{type:b,tag:d,props:{className:[x,y]},children:[]}]},{type:a,value:U}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"Let's dive right in and start looking at some assembly code! The first instruction we'll cover is "},{type:b,tag:f,props:{},children:[{type:a,value:C}]},{type:a,value:_}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"The syntax for "},{type:b,tag:f,props:{},children:[{type:a,value:C}]},{type:a,value:" is as follows:"}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:m,props:{className:[q,$]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"mov "},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:al}]},{type:a,value:"dst"},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:am}]},{type:a,value:B},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:al}]},{type:a,value:"src"},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:am}]},{type:a,value:c}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:ag},{type:b,tag:f,props:{},children:[{type:a,value:C}]},{type:a,value:" instruction is quite straightforward, it "},{type:b,tag:i,props:{},children:[{type:a,value:C}]},{type:a,value:"es the values from the "},{type:b,tag:f,props:{},children:[{type:a,value:an}]},{type:a,value:" operand to the "},{type:b,tag:f,props:{},children:[{type:a,value:ao}]},{type:a,value:" operand. The "},{type:b,tag:f,props:{},children:[{type:a,value:ao}]},{type:a,value:" operand will contain the name of the register you intend to write to, and the "},{type:b,tag:f,props:{},children:[{type:a,value:an}]},{type:a,value:" operand can contain the name of the register you intend to read from, or an immediate numerical value."}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:m,props:{className:[q,z]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"mov rax, 123\n"}]}]}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:m,props:{className:[q,z]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"result:\nrax: 123\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"You can also move values between registers."}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:m,props:{className:[q,z]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"mov rax, 123\nmov rbx, rax\n"}]}]}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:m,props:{className:[q,z]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"result:\nrax: 123\nrbx: 123\n"}]}]}]},{type:a,value:c},{type:b,tag:"mini-omulator",props:{"initial-code":"\nmov rax, 123\nmov rbx, rax\n"},children:[{type:a,value:"\n\n\n"}]},{type:a,value:c},{type:b,tag:ah,props:{},children:[{type:a,value:"\nAlthough the name of the instruction is "},{type:b,tag:i,props:{},children:[{type:a,value:"move"}]},{type:a,value:", do not be confused as the operation is actually more similar to a "},{type:b,tag:i,props:{},children:[{type:a,value:"copy"}]},{type:a,value:", the original operand will not have its value cleared.\n"}]},{type:a,value:c},{type:b,tag:t,props:{id:V},children:[{type:b,tag:u,props:{ariaHidden:v,href:"#sub-registers",tabIndex:w},children:[{type:b,tag:d,props:{className:[x,y]},children:[]}]},{type:a,value:W}]},{type:a,value:c},{type:b,tag:t,props:{id:X},children:[{type:b,tag:u,props:{ariaHidden:v,href:"#instruction-pointer-rip",tabIndex:w},children:[{type:b,tag:d,props:{className:[x,y]},children:[]}]},{type:a,value:Y}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"As mentioned earlier, there is a special register called "},{type:b,tag:f,props:{},children:[{type:a,value:l}]},{type:a,value:" that acts as a "},{type:b,tag:i,props:{},children:[{type:a,value:"pointer"}]},{type:a,value:" to the next instruction to be executed."}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"This acts a sort of cursor to indicate the current instructions being executed.\nThe value of this register is never explicitly modified.\nRather, as the program progresses, the "},{type:b,tag:f,props:{},children:[{type:a,value:l}]},{type:a,value:" register is modified as a "},{type:b,tag:"em",props:{},children:[{type:a,value:"side-effect"}]},{type:a,value:" accordingly.\nTherefore, you will not observe instructions that "},{type:b,tag:f,props:{},children:[{type:a,value:C}]},{type:a,value:" values into "},{type:b,tag:f,props:{},children:[{type:a,value:"rip"}]},{type:a,value:" for example."}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"We can observe this effect in the below example.\nTake note of the value of the "},{type:b,tag:f,props:{},children:[{type:a,value:l}]},{type:a,value:" register as you step through each line of assembly code."}]},{type:a,value:c},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:m,props:{className:[q,z]},children:[{type:b,tag:f,props:{},children:[{type:a,value:"# use omulator to allow them to step through\nnop\nnop\nmov rax, 321\nnop\nmov rbx, rax\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"In general, the side effect of each instruction will be to "},{type:b,tag:i,props:{},children:[{type:a,value:"increment"}]},{type:a,value:" the value of "},{type:b,tag:f,props:{},children:[{type:a,value:l}]},{type:a,value:" to refer to the next immediate instruction.\nIntuitively, you can think of it as a teacher pointing to the next line in a storybook every time the current line has been read."}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"In later lessons, we will cover other instructions that may modify "},{type:b,tag:f,props:{},children:[{type:a,value:l}]},{type:a,value:" in a very different manner.\nBut in general, it is a safe guess that "},{type:b,tag:f,props:{},children:[{type:a,value:l}]},{type:a,value:" will automatically point to the neighbouring instruction at every step."}]},{type:a,value:c},{type:b,tag:"quiz",props:{},children:[{type:a,value:ap},{type:b,tag:"option-quiz",props:{answer:K,":options":"['RAX', 'RBX', 'RCX', 'RIP']"},children:[{type:a,value:"\n        Which register is not a general-purpose register?\n    "}]},{type:a,value:ap},{type:b,tag:"text-quiz",props:{answer:"2"},children:[{type:a,value:"\n        Consider the following assembly code.\n        "},{type:b,tag:m,props:{},children:[{type:b,tag:f,props:{},children:[{type:a,value:"\n    mov rax, 1\n    mov rbx, 2\n    mov rcx, rax\n    mov rcx, rbx\n        "}]}]},{type:a,value:"\n        What will be the value of "},{type:b,tag:f,props:{},children:[{type:a,value:"rcx"}]},{type:a,value:" after the code has completed running.\n    "}]},{type:a,value:c}]}]},dir:aq,path:"\u002Flessons\u002Fasm-x86-64\u002Finstructions-and-registers",extension:".md",createdAt:"2021-09-25T14:04:22.965Z",updatedAt:"2021-09-26T05:05:50.351Z"},module:{slug:"asm-x86-64",title:D,desc:"Learn about the assembly language understood by our home computers",diff:"Easy",order:n,toc:[],dir:"\u002Flessons",path:aq},prev:{slug:"introduction",module:D,title:"Introduction",desc:"Understanding the need for Assembly"},next:{slug:"numbers",module:D,title:"Numbers",desc:"Representation of numbers in the CPU"},isLesson:M,title:"Instructions and Registers | ASM (x86-64)",challenges:[]}],fetch:{},mutations:void 0}}("text","element","\n","span","token","code","p","operator","strong","register","variable","RIP","pre",2,"div","nuxt-content-highlight","line-numbers","left","rbp","h2","a","true",-1,"icon","icon-link","language-text","td",", ","mov","ASM (x86-64)","[","-","number","]","tr","\nmov     ","4","nop",true,"what-are-instructions","What are instructions?","babys-first-instruction","Baby's first instruction","what-are-registers","What are registers?","using-registers","Using registers","sub-registers","Sub-registers","instruction-pointer-rip","Instruction Pointer (RIP)","registers",".","language-nasm","\nmov     DWORD PTR ","8","edx",", DWORD PTR ","eax","!","The ","info-box","th","General-purpose","Segment","\u003C","\u003E","\u003Csrc\u003E","\u003Cdst\u003E","\n    ","\u002Flessons\u002Fasm-x86-64")));