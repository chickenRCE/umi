__NUXT_JSONP__("/lessons/asm-x86-64/memory", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai){return {data:[{content:{slug:G,layout:"lesson",module:C,title:O,desc:"Download more RAM!",order:4,omulator:P,toc:[{id:Q,depth:B,text:R},{id:S,depth:B,text:T},{id:U,depth:B,text:V},{id:W,depth:B,text:X},{id:o,depth:H,text:o},{id:s,depth:H,text:s}],body:{type:"root",children:[{type:f,tag:i,props:{},children:[{type:a,value:"Earlier we covered the concept of "},{type:f,tag:k,props:{},children:[{type:a,value:Y}]},{type:a,value:", which act as small temporary variables to store data between computations.\nNow, we need to understand what "},{type:f,tag:k,props:{},children:[{type:a,value:G}]},{type:a,value:" is."}]},{type:a,value:g},{type:f,tag:D,props:{id:Q},children:[{type:f,tag:t,props:{ariaHidden:q,href:"#what-is-memory",tabIndex:u},children:[{type:f,tag:v,props:{className:[w,x]},children:[]}]},{type:a,value:R}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:a,value:"When we think of memory, we'd immediately think of human memory and our ability to store and recall facts, feelings and much more complex information.\nFor those with more background in computers, you may think of "},{type:f,tag:r,props:{},children:[{type:a,value:"hard-drive"}]},{type:a,value:" or "},{type:f,tag:r,props:{},children:[{type:a,value:"SSD"}]},{type:a,value:" space as memory of the computer.\nHowever, when we speak of "},{type:f,tag:k,props:{},children:[{type:a,value:G}]},{type:a,value:" in terms of the "},{type:f,tag:k,props:{},children:[{type:a,value:Z}]},{type:a,value:" (like a x86), we generally are referring to "},{type:f,tag:k,props:{},children:[{type:a,value:"RAM"}]},{type:a,value:" (random-access memory)."}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:a,value:"RAM or memory refers to a short-term data storage area which our CPU can access and modify for it's needs while running programs.\nWhile registers are supposed to be used for intermediate data in calculations, registers are limited in number and in capacity.\nMemory on the other hand, is generally much more abundant and can store much larger quantities of intermediate data.\nHowever, memory will be slower to read\u002Fwrite from than registers.\nThus both have their pros and cons, and should be used appropriately depending on the context."}]},{type:a,value:"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{type:f,tag:"table",props:{},children:[{type:f,tag:"thead",props:{},children:[{type:f,tag:E,props:{},children:[{type:f,tag:I,props:{align:l},children:[{type:a,value:"Comparison"}]},{type:f,tag:I,props:{align:l},children:[{type:a,value:"Memory\u002FRAM"}]},{type:f,tag:I,props:{align:l},children:[{type:a,value:"Registers"}]}]}]},{type:f,tag:"tbody",props:{},children:[{type:f,tag:E,props:{},children:[{type:f,tag:p,props:{align:l},children:[{type:a,value:"Faster access"}]},{type:f,tag:p,props:{align:l},children:[]},{type:f,tag:p,props:{align:l},children:[{type:a,value:F}]}]},{type:f,tag:E,props:{},children:[{type:f,tag:p,props:{align:l},children:[{type:a,value:"Greater capacity"}]},{type:f,tag:p,props:{align:l},children:[{type:a,value:F}]},{type:f,tag:p,props:{align:l},children:[]}]},{type:f,tag:E,props:{},children:[{type:f,tag:p,props:{align:l},children:[{type:a,value:"Volatile?"},{type:f,tag:"br",props:{},children:[]},{type:a,value:"(Lost with power removed)"}]},{type:f,tag:p,props:{align:l},children:[{type:a,value:F}]},{type:f,tag:p,props:{align:l},children:[{type:a,value:F}]}]}]}]},{type:a,value:g},{type:f,tag:D,props:{id:S},children:[{type:f,tag:t,props:{ariaHidden:q,href:"#an-analogy-for-memory",tabIndex:u},children:[{type:f,tag:v,props:{className:[w,x]},children:[]}]},{type:a,value:T}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:a,value:"We can try to extend our analogy from earlier lessons.\nIf we recall that the "},{type:f,tag:k,props:{},children:[{type:a,value:Z}]},{type:a,value:" is a dumb chef "},{type:f,tag:r,props:{},children:[{type:a,value:"Bob"}]},{type:a,value:", and Bob stores his ingredients in "},{type:f,tag:r,props:{},children:[{type:a,value:"bowls"}]},{type:a,value:" ("},{type:f,tag:k,props:{},children:[{type:a,value:Y}]},{type:a,value:") while working, then what would memory be?\n"},{type:f,tag:k,props:{},children:[{type:a,value:O}]},{type:a,value:" in this analogy could be thought of as the counter-top, or the fridge.\nIt can definitely store much larger quantities of ingredients (data) than a bowl could, but would require a bit more effort to walk to (access)."}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:f,tag:_,props:{alt:n,src:"\u002Flessons\u002Fasm-x86-64\u002Fmemory\u002FBowlTable.png"},children:[]}]},{type:a,value:g},{type:f,tag:D,props:{id:U},children:[{type:f,tag:t,props:{ariaHidden:q,href:"#using-memory",tabIndex:u},children:[{type:f,tag:v,props:{className:[w,x]},children:[]}]},{type:a,value:V}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:a,value:"So how do we "},{type:f,tag:r,props:{},children:[{type:a,value:"access"}]},{type:a,value:" memory through x86-64 code?\nMemory addresses!"}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:a,value:"From the CPU's point of view, memory is treated like a large array of bytes (8-bit numbers).\nIn order to differentiate the different areas of memory, the CPU labels them with "},{type:f,tag:k,props:{},children:[{type:a,value:"virtual addresses"}]},{type:a,value:".\nVirtual addresses are simply indexes from the start of memory (memory address 0)."}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:a,value:"By labelling all bytes of memory with this simple addressing, we can access any byte of memory with no issues.\nIf you are comfortable with C programming, you may know about "},{type:f,tag:r,props:{},children:[{type:a,value:"pointers"}]},{type:a,value:".\nIn fact, pointers just store the memory addresses of the areas in memory the pointers are pointing to."}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:f,tag:_,props:{alt:n,src:"\u002Flessons\u002Fasm-x86-64\u002Fmemory\u002FMemoryTable.png"},children:[]}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:a,value:"As you can see, each labelled space on the table above is like an area in memory!\nEach space can store an item(data), like the apple.\nIf the data is too large for one space, it can be stored across multiple continuous spaces in memory."}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:a,value:"Enough theory, let's try to concretise our understanding with a real example!\nRecall the "},{type:f,tag:h,props:{},children:[{type:a,value:$}]},{type:a,value:" instruction taught earlier, we can actually "},{type:f,tag:h,props:{},children:[{type:a,value:$}]},{type:a,value:" values to and from memory as well!"}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:a,value:"The follow code snippet will move a 8-byte value from our memory into a register.\nThen, this value will be moved into our "},{type:f,tag:h,props:{},children:[{type:a,value:"OUT"}]},{type:a,value:" memory region @ "},{type:f,tag:r,props:{},children:[{type:a,value:"address"}]},{type:a,value:" "},{type:f,tag:h,props:{},children:[{type:a,value:"0x2000"}]},{type:a,value:aa}]},{type:a,value:g},{type:f,tag:J,props:{"initial-code":"\nmov rax, [0x1000]\nmov rbx, 0x2000\nmov [rbx], rax\n",input:"efbeadde",":show-extras":q},children:[{type:a,value:K}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:a,value:"As you can see, we make use of the "},{type:f,tag:h,props:{},children:[{type:a,value:"[]"}]},{type:a,value:" square brackets to dereference memory at addresses.\nThis can be dereferenced as an offset from "},{type:f,tag:h,props:{},children:[{type:a,value:"0"}]},{type:a,value:" (used on line 1) or dereferenced from the value of a register (used on line 3)."}]},{type:a,value:g},{type:f,tag:"info-box",props:{},children:[{type:a,value:"\nThe absolute addressing we use in line 1 is not commonly used, but we used it for better demonstration purposes.\n"}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:a,value:"Relative addressing is a more popular way that memory is accessed and can be done with syntax like so:"}]},{type:a,value:g},{type:f,tag:J,props:{"initial-code":"\nmov rax, [rip+val]\nmov rbx, rax\nnop\nlea rax, [rip+val]\nmov rcx, [rax]\nhlt\nval:\ndd 0xcafebabe\n"},children:[{type:a,value:K}]},{type:a,value:g},{type:f,tag:D,props:{id:W},children:[{type:f,tag:t,props:{ariaHidden:q,href:"#the-stack",tabIndex:u},children:[{type:f,tag:v,props:{className:[w,x]},children:[]}]},{type:a,value:X}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:a,value:"You may have learnt about the stack data structure from your university\u002Falgorithm lessons.\nThe stack data structure has great applications in our assembly programs as well!"}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:a,value:"When computer programs are loaded, it is common for the operation system (OS) to setup some basic features for the programs that are being run.\nThe stack is one such feature, and is simply a mapping of contiguous memory.\nHowever, a special register "},{type:f,tag:h,props:{},children:[{type:a,value:m}]},{type:a,value:" will be set to an address within this stack."}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:a,value:"Why is "},{type:f,tag:h,props:{},children:[{type:a,value:m}]},{type:a,value:" special you ask?\n"},{type:f,tag:h,props:{},children:[{type:a,value:m}]},{type:a,value:" is named the stack pointer register, and is meant to "},{type:f,tag:k,props:{},children:[{type:a,value:"point"}]},{type:a,value:" to the top of the stack.\nSpecial instructions like "},{type:f,tag:h,props:{},children:[{type:a,value:o}]},{type:a,value:ab},{type:f,tag:h,props:{},children:[{type:a,value:s}]},{type:a,value:" will take note of where "},{type:f,tag:h,props:{},children:[{type:a,value:m}]},{type:a,value:" is pointing and act accordingly."}]},{type:a,value:g},{type:f,tag:ac,props:{id:o},children:[{type:f,tag:t,props:{ariaHidden:q,href:"#push",tabIndex:u},children:[{type:f,tag:v,props:{className:[w,x]},children:[]}]},{type:a,value:o}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:f,tag:h,props:{},children:[{type:a,value:o}]},{type:a,value:" takes a single operand, which can be a register or memory operand.\nIt will take the value of the operand, and write it into the address pointed to by "},{type:f,tag:h,props:{},children:[{type:a,value:m}]},{type:a,value:", it will then "},{type:f,tag:k,props:{},children:[{type:a,value:"decrement"}]},{type:a,value:" the value of "},{type:f,tag:h,props:{},children:[{type:a,value:m}]},{type:a,value:aa}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:a,value:"This behaviour is exactly like "},{type:f,tag:r,props:{},children:[{type:a,value:o}]},{type:a,value:"ing an element into a stack data structure."}]},{type:a,value:g},{type:f,tag:ac,props:{id:s},children:[{type:f,tag:t,props:{ariaHidden:q,href:"#pop",tabIndex:u},children:[{type:f,tag:v,props:{className:[w,x]},children:[]}]},{type:a,value:s}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:f,tag:h,props:{},children:[{type:a,value:s}]},{type:a,value:" will take a single operand "},{type:f,tag:h,props:{},children:[{type:a,value:ad}]},{type:a,value:".\nIt will retrieve the value pointed to by "},{type:f,tag:h,props:{},children:[{type:a,value:m}]},{type:a,value:", and store that value into the "},{type:f,tag:h,props:{},children:[{type:a,value:ad}]},{type:a,value:" operand.\n"},{type:f,tag:h,props:{},children:[{type:a,value:m}]},{type:a,value:" will then be incremented in order to \"pop\" the value off the stack."}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:a,value:"This concept may be difficult the understand just from reading our explanation, so take some time to step through the instructions below.\nTake note of the value of "},{type:f,tag:h,props:{},children:[{type:a,value:m}]},{type:a,value:ae},{type:f,tag:h,props:{},children:[{type:a,value:"rax"}]},{type:a,value:ae},{type:f,tag:h,props:{},children:[{type:a,value:"rbx"}]},{type:a,value:" when each instruction runs.\nThe "},{type:f,tag:k,props:{},children:[{type:a,value:"STACK"}]},{type:a,value:" view should reflect the state of the stack for you to observe as well."}]},{type:a,value:g},{type:f,tag:J,props:{"initial-code":"\nmov rax, 0xdeadbeef\npush rax\npush rax\npop rbx\n",":show-extras":q},children:[{type:a,value:K}]},{type:a,value:g},{type:f,tag:i,props:{},children:[{type:a,value:"Here are a few key observations:"}]},{type:a,value:g},{type:f,tag:af,props:{},children:[{type:a,value:g},{type:f,tag:y,props:{},children:[{type:a,value:"The stack grows towards lower addresses ("},{type:f,tag:h,props:{},children:[{type:a,value:m}]},{type:a,value:" decreases after "},{type:f,tag:h,props:{},children:[{type:a,value:o}]},{type:a,value:")"}]},{type:a,value:g},{type:f,tag:y,props:{},children:[{type:f,tag:h,props:{},children:[{type:a,value:o}]},{type:a,value:ab},{type:f,tag:h,props:{},children:[{type:a,value:s}]},{type:a,value:" cause "},{type:f,tag:h,props:{},children:[{type:a,value:m}]},{type:a,value:" to be decremented and incremented by "},{type:f,tag:k,props:{},children:[{type:a,value:"8"}]}]},{type:a,value:g}]},{type:a,value:g},{type:f,tag:ag,props:{},children:[{type:a,value:g},{type:f,tag:y,props:{},children:[{type:a,value:"This is because on our 64-bit CPU, our stack elements are treated as 64-bit elements (8 bytes)"}]},{type:a,value:g}]},{type:a,value:g},{type:f,tag:af,props:{start:H},children:[{type:a,value:g},{type:f,tag:y,props:{},children:[{type:a,value:"After "},{type:f,tag:h,props:{},children:[{type:a,value:"sub rsp, 8"}]},{type:a,value:", we can see that our "},{type:f,tag:h,props:{},children:[{type:a,value:"0xdeadbeef"}]},{type:a,value:" value still stays on the stack, and was not removed."}]},{type:a,value:g}]},{type:a,value:g},{type:f,tag:ag,props:{},children:[{type:a,value:g},{type:f,tag:y,props:{},children:[{type:a,value:"Our stack data structure \"removes\" items from the stack by simply incrementing the value of "},{type:f,tag:h,props:{},children:[{type:a,value:m}]},{type:a,value:" (out of sight, out of mind)"}]},{type:a,value:g},{type:f,tag:y,props:{},children:[{type:a,value:"Future pushes will just overwrite this value if necessary, so there is no need to waste CPU time to clear these values"}]},{type:a,value:g}]}]},dir:ah,path:"\u002Flessons\u002Fasm-x86-64\u002Fmemory",extension:".md",createdAt:ai,updatedAt:ai},module:{slug:"asm-x86-64",title:C,desc:"Learn about the assembly language understood by our home computers",diff:"Easy",order:B,toc:[],dir:"\u002Flessons",path:ah},prev:{slug:"numbers",module:C,title:"Numbers",desc:"Representation of numbers in the CPU"},next:{slug:"operators",module:C,title:"Operators",desc:"Perform operations on data"},isLesson:P,title:"Memory | ASM (x86-64)",challenges:[]}],fetch:{"MiniOmulator:0":{runLine:L,error:n,ready:d,code:n,editorRO:j,codeDecorationIDs:[],runLineDecoration:j,codeAddressCSS:j,codeAddressDecorations:{},codeMouseUpDisposable:j,breakpointDecorationIDs:[],locked:d,show_address:d,omulator:j,registers:{rax:e,rbx:e,rcx:e,rdx:e,rdi:e,rsi:e,r8:e,r9:e,r10:e,r11:e,r12:e,r13:e,r14:e,r15:e,rbp:z,rsp:z,rip:M},rbp:A,rsp:A,rip:N,rax_changed:d,rbx_changed:d,rcx_changed:d,rdx_changed:d,rdi_changed:d,rsi_changed:d,r8_changed:d,r9_changed:d,r10_changed:d,r11_changed:d,r12_changed:d,r13_changed:d,r14_changed:d,r15_changed:d,rbp_changed:d,rsp_changed:d,rip_changed:d,stack:[e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e],stack_changed:[d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d],mm_input_hex:[b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b],mm_output_hex:[b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b],mm_input_utf:[c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c],mm_output_utf:[c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c],is_editing:d,input_edit_field:n,hasTests:d,showTests:d,tests:[],testResults:[]},"MiniOmulator:1":{runLine:L,error:n,ready:d,code:n,editorRO:j,codeDecorationIDs:[],runLineDecoration:j,codeAddressCSS:j,codeAddressDecorations:{},codeMouseUpDisposable:j,breakpointDecorationIDs:[],locked:d,show_address:d,omulator:j,registers:{rax:e,rbx:e,rcx:e,rdx:e,rdi:e,rsi:e,r8:e,r9:e,r10:e,r11:e,r12:e,r13:e,r14:e,r15:e,rbp:z,rsp:z,rip:M},rbp:A,rsp:A,rip:N,rax_changed:d,rbx_changed:d,rcx_changed:d,rdx_changed:d,rdi_changed:d,rsi_changed:d,r8_changed:d,r9_changed:d,r10_changed:d,r11_changed:d,r12_changed:d,r13_changed:d,r14_changed:d,r15_changed:d,rbp_changed:d,rsp_changed:d,rip_changed:d,stack:[e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e],stack_changed:[d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d],mm_input_hex:[b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b],mm_output_hex:[b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b],mm_input_utf:[c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c],mm_output_utf:[c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c],is_editing:d,input_edit_field:n,hasTests:d,showTests:d,tests:[],testResults:[]},"MiniOmulator:2":{runLine:L,error:n,ready:d,code:n,editorRO:j,codeDecorationIDs:[],runLineDecoration:j,codeAddressCSS:j,codeAddressDecorations:{},codeMouseUpDisposable:j,breakpointDecorationIDs:[],locked:d,show_address:d,omulator:j,registers:{rax:e,rbx:e,rcx:e,rdx:e,rdi:e,rsi:e,r8:e,r9:e,r10:e,r11:e,r12:e,r13:e,r14:e,r15:e,rbp:z,rsp:z,rip:M},rbp:A,rsp:A,rip:N,rax_changed:d,rbx_changed:d,rcx_changed:d,rdx_changed:d,rdi_changed:d,rsi_changed:d,r8_changed:d,r9_changed:d,r10_changed:d,r11_changed:d,r12_changed:d,r13_changed:d,r14_changed:d,r15_changed:d,rbp_changed:d,rsp_changed:d,rip_changed:d,stack:[e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e,e],stack_changed:[d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d,d],mm_input_hex:[b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b],mm_output_hex:[b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b],mm_input_utf:[c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c],mm_output_utf:[c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c],is_editing:d,input_edit_field:n,hasTests:d,showTests:d,tests:[],testResults:[]}},mutations:void 0}}("text","00 00 00 00 00 00 00 00","........",false,0,"element","\n","code","p",null,"strong","center","rsp","","push","td","true","em","pop","a",-1,"span","icon","icon-link","li",65280,65280,2,"ASM (x86-64)","h2","tr","✔️","memory",3,"th","mini-omulator","\n\n\n",1,4194304,4194304,"Memory",true,"what-is-memory","What is memory","an-analogy-for-memory","An analogy for memory","using-memory","Using memory","the-stack","The Stack","registers","CPU","img","mov","."," and ","h3","dst",", ","ol","ul","\u002Flessons\u002Fasm-x86-64","2022-02-12T14:48:12.427Z")));